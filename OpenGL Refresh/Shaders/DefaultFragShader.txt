#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;    
    float shininess;
}; 

struct DirectionalLight
{
	vec3 lightColour;
	
	vec3 position;
	vec3 direction;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;

	vec3 lightColour;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
in vec4 FragPosLightSpace;

#define MAX_LIGHTS 100  

uniform sampler2D shadowMap;

uniform vec3 viewPos;
uniform Material material;

uniform int numberOfDirLights;
uniform DirectionalLight dirLights[MAX_LIGHTS];

uniform int numberOfPointLights;
uniform PointLight pointLights[MAX_LIGHTS];

vec3 CalculateDirLight(DirectionalLight light, vec3 normal, vec3 viewDir);
vec3 CalculatePointLight(PointLight light, vec3 normal,vec3 fragPos, vec3 viewDir);
float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightDir, vec3 normal);

void main()
{

    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	
	vec3 output = vec3(0.0);
	
	output += CalculateDirLight(dirLights[0], norm, viewDir);

	for(int i = 0; i < numberOfPointLights; i++)
		output += CalculatePointLight(pointLights[i],norm,FragPos,viewDir);

    FragColor = vec4(output, 1.0);
}

vec3 CalculateDirLight(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - FragPos);
    // diffuse shading
    float diff = max(dot(lightDir,normal), 0.0);
    // specular shading   
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = light.ambient * light.lightColour * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse * light.lightColour * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * light.lightColour * vec3(texture(material.diffuse, TexCoords));
	
	float shadow = ShadowCalculation(FragPosLightSpace, lightDir, normal);
	
	vec3 lighting  = (ambient + (1.0 - shadow)) * (diffuse + specular);
	
    return lighting;
}

vec3 CalculatePointLight(PointLight light, vec3 normal,vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
	
    // specular shading
    vec3 reflectDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, reflectDir), 0.0), material.shininess);
	
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
	light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient * light.lightColour  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse * light.lightColour  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * light.lightColour;// * vec3(texture(material.specular, TexCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightDir,vec3 normal)
{

    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    projCoords = projCoords * 0.5 + 0.5;

    float closestDepth = texture(shadowMap, projCoords.xy).r; 

    float currentDepth = projCoords.z;

    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
	float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}